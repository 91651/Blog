@page "/role"
@attribute [Authorize]
@using System.ComponentModel
@using AntDesign.TableModels
@using Blog.Admin.Data
@using Blog.Model
@using EFCore.DynamicLinq
@using Microsoft.AspNetCore.Authorization

@inject IAdminApiProvider Api
@inject MessageService Message
@inject NavigationManager Navigation

<PageTitle>角色管理</PageTitle>

<div class="page-container">
    <Card>
        <Flex Justify="FlexJustify.SpaceBetween" Align="FlexAlign.FlexEnd">
            <Flex Justify="FlexJustify.Start" Align="FlexAlign.Center" Gap="FlexGap.Large" Wrap="FlexWrap.Wrap" style="width:100%;">
                <div class="form-group">
                    <label for="name">角色名称</label>
                    <Input Placeholder="请输入角色名称" @bind-Value="@query.Name" />
                </div>
            </Flex>
            <Space Size="SpaceSize.Middle">
                <SpaceItem>
                    <Button Icon="@IconType.Outline.Reload" @onclick="Reset">重置</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button Danger Icon="@IconType.Outline.Search" @onclick="Search">
                        搜索
                    </Button>
                </SpaceItem>
            </Space>
        </Flex>
    </Card>
    <br />
    <Card Title=@("角色列表")>
        <Extra>
            <Space Size="SpaceSize.Middle">
                <SpaceItem>
                    <Button Danger Icon="@IconType.Outline.Plus" @onclick="() => Edit()">新增</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button Icon="@IconType.Outline.Reload" @onclick="Search">刷新</Button>
                </SpaceItem>
            </Space>
        </Extra>
        <Body>
            <Table TableLayout="fixed" TItem="RoleModel" DataSource="roles.Data" Total="roles.Total" Loading="isTableLoading" RemoteDataSource
                   @bind-PageIndex="query.PageIndex"
                   @bind-PageSize="query.PageSize"
                   OnChange="OnChange" AutoHeight>
                <PropertyColumn Property="c=>c.Name" />
                <ActionColumn Title="操作" Width="180">
                    <Space>
                        <SpaceItem>
                            <Button Type="@ButtonType.Link" Icon="@IconType.Outline.Edit" Size="@ButtonSize.Small" @onclick="() => Edit(context)">编辑</Button>
                        </SpaceItem>

                        <SpaceItem>
                            <Button Danger Type="@ButtonType.Link" Icon="@IconType.Outline.Delete" Size="@ButtonSize.Small" @onclick="() => Del(context.Id)">删除</Button>
                        </SpaceItem>
                    </Space>
                </ActionColumn>
            </Table>

        </Body>
    </Card>

    <Drawer Closable="true" @bind-Visible="isShowEditModal" Placement="DrawerPlacement.Right" Title="@("添加角色")" Width="360">
        <Form @ref="@editForm" Layout="FormLayout.Vertical" Model="@role"
              OnFinish="Submit">
            <FormItem Label="角色名称" Required>
                <Input @bind-Value="@context.Name" />
            </FormItem>
            <FormItem>
                <Flex Justify="FlexJustify.FlexEnd" Align="FlexAlign.Center" Gap="FlexGap.Middle">
                    <Button @onclick="() => isShowEditModal = false">取消</Button>
                    <Button Danger Type="@ButtonType.Primary" HtmlType="submit">
                        确认
                    </Button>
                </Flex>
            </FormItem>
        </Form>
    </Drawer>
</div>


@code {
    private RoleQueryModel query = new();
    private RoleModel role = new ();
    private PageResult<List<RoleModel>> roles = new();
    private Form<RoleModel> editForm = default!;
    private bool isTableLoading = false;
    private bool isShowEditModal = false;

    protected override async Task OnInitializedAsync()
    {
        await GetRoles();
    }

    private async Task GetRoles()
    {
        isTableLoading = true;
        var data = await Api.GetRolesAsync(query);
        if(data != null)
        {
            roles = data;
        }
        isTableLoading = false;
    }

    private void Edit(RoleModel? role = default)
    {
        this.role = new();
        if (role != null)
        {
            this.role = role;
        }
        isShowEditModal = true;
    }

    private async Task Search()
    {
        await GetRoles();
    }

    private void Reset()
    {
        query = new();
    }

    public async Task OnChange(QueryModel<RoleModel> queryModel)
    {
        await GetRoles();
    }


    private async Task Submit(EditContext editContext)
    {
        if (!string.IsNullOrWhiteSpace(role.Id))
        {
            var result = await Api.UpdateRoleAsync(role.Id, role);
            if (result)
            {
                isShowEditModal = false;
                await GetRoles();
                await Message.SuccessAsync("角色更新成功");
                return;
            }
            await Message.WarnAsync("角色更新失败");
        }
        else
        {
            var result = await Api.AddRoleAsync(role);
            if (result)
            {
                isShowEditModal = false;
                await GetRoles();
                await Message.SuccessAsync("角色添加成功");
                return;
            }
            await Message.WarnAsync("角色添加失败");
        }
    }

    private void HandleOk(MouseEventArgs e)
    {
        editForm.Submit();
    }

    private async Task Del(string id)
    {
        var result = await Api.DeleteRoleAsync(id);
        if (result)
        {
            await GetRoles();
            await Message.SuccessAsync("角色删除成功");
            return;
        }
        await Message.WarnAsync("角色删除失败");
    }
}