@page "/channel"
@attribute [Authorize]
@using System.ComponentModel
@using AntDesign.TableModels
@using Blog.Model
@using EFCore.DynamicLinq
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject MessageService _message
@inject NavigationManager Navigation

<PageTitle>Index</PageTitle>

<Card>
    <Card>
         <Space>
            <SpaceItem>
                <Button Danger @onclick="() => Edit()">添加栏目</Button>
            </SpaceItem>
         </Space>         
    </Card>
    <br />
    <Table HidePagination="true" DataSource="channels" TreeChildren="item => item.Children" IndentSize="20" >
        <PropertyColumn Property="c=>c.Channel.Title" />
        <PropertyColumn Property="c=>c.Channel.Description" Width="30%" />
        <PropertyColumn Property="c=>c.Channel.State">
            @if (context.Channel.State == 1)
            {
                <Tag Color="@PresetColor.Green.ToString()">启用</Tag>
            }
            else
            {
                <Tag Color="@PresetColor.Red.ToString()">禁用</Tag>
            }
        </PropertyColumn>
        <ActionColumn Title="操作">
            <Space>
                <SpaceItem>
                    <Button Type="@ButtonType.Link" Icon="@IconType.Outline.Edit" Size="@ButtonSize.Small" @onclick="() => Edit(context.Channel)">编辑</Button>
                </SpaceItem>
                @if(context.Channel.State == 1)
                {
                    <SpaceItem>
                        <Button Type="@ButtonType.Link" Icon="@IconType.Outline.EyeInvisible" Size="@ButtonSize.Small" @onclick="() => EditState(context.Channel, 2)">禁用</Button>
                    </SpaceItem>
                }
                else
                {
                    <SpaceItem>
                        <Button Type="@ButtonType.Link" Icon="@IconType.Outline.Eye" Size="@ButtonSize.Small" @onclick="() => EditState(context.Channel, 1)">启用</Button>
                    </SpaceItem>
                }

                <SpaceItem>
                    <Button Danger Type="@ButtonType.Link" Icon="@IconType.Outline.Delete" Size="@ButtonSize.Small" @onclick="() => Del(context.Channel.Id)">删除</Button>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>

    <Modal Title="添加栏目" Closable="@false" Visible="isShowEditModal" OnOk="@HandleOk" OnCancel="() => isShowEditModal = false">
        <Form @ref="@editForm" Model="@channel"
              LabelColSpan="6"
              WrapperColSpan="16"
              OnFinish="Submit">
            <FormItem Label="标题">
                <Input @bind-Value="@context.Title" />
            </FormItem>
            <FormItem Label="上级栏目">
                <TreeSelect DataSource="channels" @bind-Value="@context.ParentId" Placeholder="默认添加顶级栏目"
                            AllowClear
                            TreeDefaultExpandAll
                            ChildrenExpression="node=>node.DataItem.Children"
                            TitleExpression="node=>node.DataItem.Channel.Title"
                            KeyExpression="node=>node.DataItem.Channel.Id"
                            IsLeafExpression="node=>node.DataItem.Children==null">
                </TreeSelect>
            </FormItem>
            <FormItem Label="描述">
                <TextArea AllowClear @bind-Value="@context.Description" />
            </FormItem>
            <FormItem Label="状态">
                <Switch Value="context.State == 1 ? true: false" CheckedChildren="启用" UnCheckedChildren="禁用" OnChange="value => context.State = value ? 1 : 2" />
            </FormItem>
        </Form>
    </Modal>
    
</Card>

@code {
    private ArticleQueryModel query = new ();
    private ChannelModel channel = new ChannelModel{ State = 1 };
    private List<ChannelTreeModel> channels = new();
    private Form<ChannelModel> editForm = default!;
    private bool isShowEditModal = false;

    protected override async Task OnInitializedAsync()
    {
        await GetChannels();
    }

    private async Task GetChannels()
    {
        var data = await Http.GetFromJsonAsync<List<ChannelModel>>("/api/admin/channel");
        if(data != null)
        {
            channels = data.Select(c => new ChannelTreeModel { Channel = c, Children = data.Where(ch => ch.ParentId == c.Id).Select(ch => new ChannelTreeModel { Channel = ch }).ToArray() }).Where(c => string.IsNullOrWhiteSpace(c.Channel.ParentId)).ToList();
        }
    }

    private void Edit(ChannelModel? channel = default)
    {
        if (channel != null)
        {
            this.channel = channel;
        }
        isShowEditModal = true;
    }

    private async Task EditState(ChannelModel channel, int state)
    {
        channel.State = state;
        var resp = await Http.PutAsJsonAsync<ChannelModel>($"/api/admin/channel/{channel.Id}", channel);
            if (resp.IsSuccessStatusCode)
            {

                var data = await resp.Content.ReadAsStringAsync();
                if (!string.IsNullOrWhiteSpace(data))
                {
                    await _message.Success("栏目更新成功");
                    isShowEditModal = false;
                    await GetChannels();
                    return;
                }
            }
            await _message.Warn("栏目更新失败");
    }

    private async Task Submit(EditContext editContext)
    {
        if (!string.IsNullOrWhiteSpace(channel.Id))
        {
            var resp = await Http.PutAsJsonAsync<ChannelModel>($"/api/admin/channel/{channel.Id}", channel);
            if (resp.IsSuccessStatusCode)
            {

                var data = await resp.Content.ReadAsStringAsync();
                if (!string.IsNullOrWhiteSpace(data))
                {
                    await _message.Success("栏目更新成功");
                    isShowEditModal = false;
                    await GetChannels();
                    return;
                }
            }
            await _message.Warn("栏目更新失败");
        }
        else
        {
            var resp = await Http.PostAsJsonAsync<ChannelModel>("/api/admin/channel", channel);
            if (resp.IsSuccessStatusCode)
            {
                var data = await resp.Content.ReadAsStringAsync();
                if (!string.IsNullOrWhiteSpace(data))
                {
                    await _message.Success("栏目添加成功");
                    isShowEditModal = false;
                    await GetChannels();
                    return;
                }
            }
            await _message.Warn("栏目添加失败");
        }
    }

    private void HandleOk(MouseEventArgs e)
    {
        editForm.Submit();
    }

    private async Task Del(string id)
    {
        var resp = await Http.DeleteAsync($"/api/admin/channel/{id}");
        if (resp.IsSuccessStatusCode)
        {
            await _message.Success("栏目删除成功");
            await GetChannels();
            return;
        }
        await _message.Warn("栏目删除失败");
    }
}