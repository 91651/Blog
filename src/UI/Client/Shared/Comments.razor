@using Blog.Model
@using Blog.Client.Data
@using Lazy.SlideCaptcha.Core
@using Lazy.SlideCaptcha.Core.Validator

@inject IClientApiProvider _api

<div class="comments">
    <h3>评论</h3>

    <Comment Avatar="@comment.Author">
        <ContentTemplate>
            @GetEditor(comment)
        </ContentTemplate>
    </Comment>
    @CommentContent(comments)
</div>

@if (IsShowCaptcha)
{
    @captcha
}



@code {
    [Parameter]
    public string OwnerId { get; set; } = default!;
    private List<CommentModel> comments = new List<CommentModel>();
    private CommentModel comment = new CommentModel() { Author = "Hi" };
    private string? replyId;
    private CommentModel replyComment = new CommentModel();
    private RenderFragment captcha = default!;
    private bool IsShowCaptcha = false;
    private string requestId = default!;

    protected override async Task OnInitializedAsync()
    {
        await GetComments();
    }

    private async Task GetComments()
    {
        comments = await _api.GetCommentsAsync(OwnerId, default);
    }

    private async Task GenerateCaptchaAsync(Captcha captcha)
    {
        captcha.StartRequestGenerate();
        StateHasChanged();
        var data = await _api.GenerateCaptchaAsync<CaptchaData>();
        requestId = data.Id;
        captcha.EndRequestGenerate(data.BackgroundImage, data.SliderImage);
        StateHasChanged();
    }

    private async void SubmitComment(CommentModel _comment, string? pid)
    {
        Captcha _captcha = default!;
        captcha = @<Captcha @ref="_captcha" ShowRefresh="true" OnRefresh="() => GenerateCaptchaAsync(_captcha)" OnFinish="(SlideTrack captchaCode) => CaptchaFinish(_captcha, _comment, pid, captchaCode)" />;
        IsShowCaptcha = true;
        await Task.Yield();
        await GenerateCaptchaAsync(_captcha);
    }


    private async Task CaptchaFinish(Captcha _captcha, CommentModel _comment, string? pid, SlideTrack slideTrack)
    {
        _captcha.StartRequestVerify();
        var resp = await _api.VerifyCaptchaAsync<SlideTrack, ValidateResult>(requestId, slideTrack);
        var validateResult = resp.Result == ValidateResult.ValidateResultType.Success;
        _captcha.EndRequestVerify(validateResult);
        StateHasChanged();
        if (!validateResult)
        {
            await Task.Delay(1000);
            await GenerateCaptchaAsync(_captcha);
            return;
        }
        await Task.Delay(1000);
        IsShowCaptcha = false;
        StateHasChanged();

        _comment.OwnerId = OwnerId;
        _comment.ParentId = pid;
        var result = await _api.AddCommentAsync(_comment, requestId);
        if (result)
        {
            replyId = default;
            comment = new() { Author = "Hi" };
            await GetComments();
            StateHasChanged();
        }
    }

    private void ReplyComment(string rid)
    {
        replyComment = new ();
        replyId = rid;
    }


    RenderFragment CommentContent(List<CommentModel> DataSource) =>
        @<div>
            @foreach (var item in DataSource)
            {
                <Comment Avatar="@(item.Author)" Author="@item.Author" Content="@item.Content" Actions="@(new []{replyAction(item.Id)})">
                    <DatetimeTemplate>
                        @dateTime(item.Created)
                    </DatetimeTemplate>
                    <ChildContent>@CommentContent(item.Comments)</ChildContent>
                </Comment>
                @if (item.Id == replyId)
                {
                    <Comment Avatar="Hi">
                        <ContentTemplate>
                            @(GetEditor(replyComment, item.Id))
                        </ContentTemplate>
                    </Comment>
                }
            }
        </div>;

    RenderFragment replyAction(string rid) => @<span @onclick="() => ReplyComment(rid)">回复</span>;

    RenderFragment GetEditor(CommentModel model, string? pid = null)
    {
        return
        @<div>

        <form @onsubmit="() => SubmitComment(model, pid)">
            <div style="
                border: 1px solid #ddd;
                border-radius: 6px;
                background-color: var(--tb--white);
                position: relative;
            ">
                <textarea placeholder="良言一句三冬暖，恶语伤人六月寒。" @bind="@model.Content" required style="
            width: 100%;
            resize: none;
            overflow-x: hidden;
            overflow-y: auto;
            border: none;
            font-size: 14px;
            padding: 10px 12px;
            outline: 0;
            color: #666;
            height: 77px;
            border-radius: 6px;
            background-color: var(--tb--white);
            display: block;
        "></textarea>
                <div class="comment-editor-actions">

                    <div style="display:flex; flex:1">
                        <button type="button" class="user-label">
                            昵称
                        </button>

                        <input placeholder="昵称(必填)" @bind="@model.Author" required class="user-input">
                    </div>
                    <div class="email">
                        <button type="button" class="email-label">
                            邮箱
                        </button>

                        <input placeholder="邮箱(必填)" @bind="@model.Email" type="email" required class="email-input">
                    </div>
                    <div style="display:flex;">
                        <button type="submit" class="submit-button">
                                提交评论
                            </button>
                    </div>
                </div>
            </div>
        </form>
        </div>;
    }

    RenderFragment dateTime(DateTime dateTime) =>
    @<span>
        @(dateTime.ToLocalTime())
    </span>;
}

