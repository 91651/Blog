@page "/search"
@rendermode InteractiveAuto

@using Microsoft.AspNetCore.WebUtilities
@using Blog.Model
@using Blog.Client.Data
@inject NavigationManager _navigationManager
@inject IClientApiProvider _api

<PageTitle>搜索结果 | 遇见时光-1bk.cn</PageTitle>

@if (Total > 0)
{
    <section class="term-bar">
        <div class="container">
            <span>搜索结果</span>
            <span class="term-illustrate">“@q” 搜到 @Total 篇文章</span>
        </div>
    </section>
    <section class="site-content container">
        @foreach (var article in Articles)
        {
            <article class="hasThumb flex">
                <div class="article-content">
                    <h2 class="entry-title hidden">
                        <a class="hoverColor" href="/p/@article.Id" title="@article.Title" rel="bookmark">@article.Title</a>
                    </h2>
                    <div class="entry-content hidden">
                        @article.Summary
                    </div>
                    <div class="entry-info">
                        <span class="info">
                            <svg class="icon">
                                <use xlink:href="#icon-book" />
                            </svg>
                            @article.ChannelName
                        </span>
                        <span class="info">
                            <svg class="icon">
                                <use xlink:href="#icon-calendar" />
                            </svg>                        @($"{article.Created:yyyy年M月d日 HH:mm}")
                        </span>
                        <span class="info">
                            <svg class="icon">
                                <use xlink:href="#icon-user" />
                            </svg>                        @article.Author
                        </span>
                        <span class="info">
                            <svg class="icon">
                                <use xlink:href="#icon-eye" />
                            </svg>                        @article.Viewed
                        </span>
                        <span class="info">
                            <svg class="icon">
                                <use xlink:href="#icon-message" />
                            </svg>                        @article.CommentCount
                        </span>
                    </div>
                </div>
                <div class="entry-thumb">
                    <a class="focus hidden" href="/p/@article.Id" title="@article.Title">
                        @if (@article.File != null)
                        {
                            <img loading="auto" src="@Path.Combine(article.File.Path, article.File.Name)" alt="@article.Title" title="@article.Title">
                        }
                    </a>
                </div>
            </article>
        }
        <div class="pagenavi flex">
            <a class="load-more" @onclick="GetArticles">@(Articles.Count != Total ? "加载更多搜索结果" : "已经加载全部搜索内容")</a>
        </div>
    </section>
}
else
{
    <section class="site-content container">
        <span class="trem-state">姿势不对？换个词搜一下~</span>
        <span class="trem-info">抱歉，没有找到“@q”的相关内容</span>
        <form method="get" class="vice-search" action="/search">
            <input type="search" class="field" placeholder="输入关键词进行搜索…" name="q" required>
            <button type="submit" class="search-submit"><i class="iconfont icon-search-2-line"></i></button>
        </form>
    </section>
}

@code {
    [PersistentState]
    public int Page { get; set; }
    [PersistentState]
    public int Total { get; set; }
    [PersistentState]
    public required List<ArticleListModel> Articles { get; set; }
    public string? q;
    private ArticleQueryModel query = new() { PageSize = 20 };
    


    protected override async Task OnInitializedAsync()
    {
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue(nameof(q), out var p))
        {
            q = p.First();
        }
        if (Articles is null)
        {
            Articles ??= new();
            await GetArticles();
        }
    }

    private async Task GetArticles()
    {
        query.Keyword = q?.Trim();
        query.PageIndex = ++Page;
        var data = (await _api.GetArticlesAsync(query));
        Total = data.Total;
        Articles.AddRange(data.Data);
    }
}