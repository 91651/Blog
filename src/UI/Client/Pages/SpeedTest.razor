@page "/speedtest"
@rendermode InteractiveAuto

@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.Globalization
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager _navigationManager

<PageTitle>网速测试 | 遇见时光-1023.org.cn</PageTitle>
<HeadContent>
    <meta name="keywords" content="在线测速,网速测试,下载速度测试">
    <meta name="description" content="多地多节点测试您的网速，同时具备网络延迟实时检测">
</HeadContent>

<style>
    .stat {
    width: 100%;
    column-gap: 1rem;
    padding: 1rem 1.5rem;
    }

    .stat-title {
    white-space: nowrap;
    opacity: .6;
    }

    .stat-value {
    white-space: nowrap;
    grid-column-start: 1;
    font-size: 1.8rem;
    font-weight: 700;
    line-height: 2.5rem
    }
</style>
<div class="container">
    <div class="card card-preview">
        <div class="card-inner mt-3">

            <div class="form-group">
                <label class="form-label">测试地址</label>
                <div class="form-control-wrap">
                    <select type="text" class="form-control" @bind="SelectedUrl" @bind:after="() =>{TestUrl = SelectedUrl;}">
                        <option value="">自定义</option>
                        <option selected="selected" value="https://wppkg.baidupcs.com/issue/netdisk/apk/BaiduNetdisk_10.1.02.apk">百度CDN [高速]</option>
                        <option value="https://kodo-toolbox.qiniu.com/kodo-browser-Linux-x64-v1.0.17.zip">七牛云CDN [高速]</option>
                        <option value="https://img.alicdn.com/imgextra/i1/O1CN01xA4P9S1JsW2WEg0e1_!!6000000001084-2-tps-2880-560.png">阿里CDN</option>
                        <option value="https://game.gtimg.cn/images/nz/web202106/index/bc_part1.gif?0.3190485611376561">腾讯CDN</option>
                        <option value="https://lf9-cdn-tos.bytecdntp.com/cdn/yuntu-index/1.0.4/case/maiteng/detailbg.png">字节跳动</option>
                        <option value="https://img10.360buyimg.com/live/jfs/t1/128947/12/26918/1361527/6260e71bE0ee85af5/ecaa17ea8dd3dddb.jpg">京东</option>
                        <option value="https://pic-bucket.ws.126.net/photo/0003/2022-04-24/H5N2082C00AJ0003NOS.jpg">网易</option>
                        <option value="https://cnbj0.fds.api.xiaomi.com/b2c-data-mishop/9b9d95e1ece27d5ec75205e5fe719ba5.apk">小米</option>
                        <option value="https://wwwstatic.vivo.com.cn/vivoportal/files/resource/funtouch/1651200648928/images/os2-jude-video.mp4">Vivo</option>
                        <option value="https://d.musicapp.migu.cn/upload/fbpt_rsync_apps/local/signed/MobileMusic7140/MobileMusic7140_0140068.apk">咪咕音乐</option>
                        <option value="https://img.mcloud.139.com/material_prod/material_media/20221128/1669626861087.png">和彩云</option>
                        <option value="https://vod-origin-rjzy.gdoss.xstore.ctyun.cn/07da9eb52ad948c7b58b760003c0006b.mp4">天翼云</option>
                        <option value="https://cachefly.cachefly.net/100mb.test">Cachefly Test [Global]</option>
                        <option value="https://speed.cloudflare.com/__down?bytes=1073741824">Cloudflare Speed [Global]</option>
                    </select>
                    <input @bind="TestUrl" @oninput='() => {SelectedUrl = "";}' type="text" placeholder="请输入下载链接" autocomplete="off" class="form-control">
                </div>
            </div>
            <div class="form-group">
                <label class="form-label">线程</label>
                <div class="form-control-wrap number-spinner-wrap">
                    <button onclick="var thread=document.getElementById('thread');if(thread.value!=thread.min)thread.value--;" class="btn btn-icon btn-outline-primary number-spinner-btn number-minus"><em class="icon ni ni-minus"></em></button> <input onchange="var self= document.getElementById('thread');if(self.value<self.min)self.value=self.min;if(self.value>self.max)self.value=self.max" id="thread" type="number" min="1" max="32" value="1" class="form-control number-spinner"> <button onclick="var thread=document.getElementById('thread');if(thread.value!=thread.max)thread.value++;" class="btn btn-icon btn-outline-primary number-spinner-btn number-plus"><em class="icon ni ni-plus"></em></button>
                </div>
            </div>
            <div class="form-group" id="back">
                <div class="preview-block">
                    <div class="custom-control custom-switch checked">
                        <input onclick="musiccontrol(this)" type="checkbox" id="customSwitch2" class="custom-control-input"> <label for="customSwitch2" class="custom-control-label">保持后台运行</label>
                    </div>
                </div>
            </div>
            <button type="button" class="btn btn-dim btn-outline-secondary btn-block card-link" disabled="@IsTaskDisabled" @onclick="ToggleTest">
                @(TaskText ?? "开始")
            </button>
            <div class="row mt-4">
                <div class="col-sm-12 col-md-4 border stat" onclick="inputMax=prompt(&quot;请输入流量上限(GB)\n不填为不设置上限&quot;,&quot;&quot;);if(inputMax !== null)setMax(inputMax)">
                    <div class="text-dark">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="h-15 w-15 float-right pt-3">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z">
                            </path>
                        </svg>
                    </div>
                    <div class="stat-title">总流量<a id="showMax"></a></div>
                    <div class="stat-value">@(AllDownSum == null ? "-" : FormatSpeed(AllDownSum ?? 0, new[] { "B", "KB", "MB", "GB", "TB", "PB" }, new[] { 0, 0, 1, 2, 2, 2 }))</div>
                </div>
                <div class="col-sm-12 col-md-4 border stat">
                    <div class="text-info">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="h-15 w-15 float-right pt-3">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M16.469,8.924l-2.414,2.413c-0.156,0.156-0.408,0.156-0.564,0c-0.156-0.155-0.156-0.408,0-0.563l2.414-2.414c1.175-1.175,1.175-3.087,0-4.262c-0.57-0.569-1.326-0.883-2.132-0.883s-1.562,0.313-2.132,0.883L9.227,6.511c-1.175,1.175-1.175,3.087,0,4.263c0.288,0.288,0.624,0.511,0.997,0.662c0.204,0.083,0.303,0.315,0.22,0.52c-0.171,0.422-0.643,0.17-0.52,0.22c-0.473-0.191-0.898-0.474-1.262-0.838c-1.487-1.485-1.487-3.904,0-5.391l2.414-2.413c0.72-0.72,1.678-1.117,2.696-1.117s1.976,0.396,2.696,1.117C17.955,5.02,17.955,7.438,16.469,8.924 M10.076,7.825c-0.205-0.083-0.437,0.016-0.52,0.22c-0.083,0.205,0.016,0.437,0.22,0.52c0.374,0.151,0.709,0.374,0.997,0.662c1.176,1.176,1.176,3.088,0,4.263l-2.414,2.413c-0.569,0.569-1.326,0.883-2.131,0.883s-1.562-0.313-2.132-0.883c-1.175-1.175-1.175-3.087,0-4.262L6.51,9.227c0.156-0.155,0.156-0.408,0-0.564c-0.156-0.156-0.408-0.156-0.564,0l-2.414,2.414c-1.487,1.485-1.487,3.904,0,5.391c0.72,0.72,1.678,1.116,2.696,1.116s1.976-0.396,2.696-1.116l2.414-2.413c1.487-1.486,1.487-3.905,0-5.392C10.974,8.298,10.55,8.017,10.076,7.825">
                            </path>
                        </svg>
                    </div>
                    <div class="stat-title">实时速度</div>
                    <div class="stat-value text-info">@(RealTimeSpeed == null ? "-" : FormatSpeed(RealTimeSpeed ?? 0, new[] { "B/s", "KB/s", "MB/s", "GB/s", "TB/s", "PB/s" }, new[] { 0, 0, 1, 2, 2, 2 }))</div>
                </div>
                <div class="col-sm-12 col-md-4 border stat">
                    <div class="text-dark">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="h-15 w-15 float-right pt-3">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                        </svg>
                    </div>
                    <div class="stat-title">带宽</div>
                    <div class="stat-value">@(RealTimeMbps == null ? "-" : FormatSpeed(RealTimeMbps ?? 0, new[] { "Bps", "Kbps", "Mbps", "Gbps", "Tbps", "Pbps" }, new[] { 0, 0, 0, 2, 2, 2 }))</div>
                </div>
            </div>
        </div>
    </div>
    <div class="card card-preview">
        <div class="card-inner">
            <h6><em class="icon ni ni-info"></em>出口地址</h6>
            <div class="accordion-inner">
                <li class="nk-menu-item ">
                    <a class="text-waring" style="pointer-events:none;">@(ChinaIpInfo)</a>
                    <a class="text-waring" style="pointer-events:none;float: right;">@(ChinaLatency)</a>
                </li>
                <li class="nk-menu-item ">
                    <a style="pointer-events:none;">@(GlobalIpInfo)</a>
                    <a style="pointer-events: none; float: right; color: green;">@(GlobalLatency)</a>
                </li>
            </div>
        </div>
    </div>
</div>

@code {
    private string? SelectedUrl { get; set; } = "";
    private string? TestUrl { get; set; } = "";
    // 状态变量
    private bool IsRunning = false;
    private int MaxThreads = 1;
    private string? TaskText = "开始";
    private bool IsTaskDisabled = false;
    private string Description = "实时速度";

    // 下载统计
    private long Maximum = 0;
    private long? AllDownSum = 0;
    private long LastTotalDownload = 0;
    private double? RealTimeSpeed;
    private double? RealTimeMbps;

    // IP 信息
    private string ChinaIpInfo = "获取中...";
    private string GlobalIpInfo = "获取中...";
    private string ChinaLatency = "-ms";
    private string GlobalLatency = "-ms";

    // 线程下载数据
    private List<long> ThreadDownloads = new();

    // 开始时间
    private DateTime StartTime;

    // 切换测试状态
    private async Task ToggleTest()
    {
        if (IsRunning)
        {
            StopTest();
        }
        else
        {
            Task.Run( StartTest);
        }
    }

    // 开始测试
    private async Task StartTest()
    {
        if(AllDownSum >= Maximum && Maximum != 0)
        {
            AllDownSum = 0;
        }
        if (string.IsNullOrWhiteSpace(TestUrl) || !Uri.IsWellFormedUriString(TestUrl, UriKind.Absolute))
        {
            await JSRuntime.InvokeVoidAsync("alert", "链接不合法");
            return;
        }

        if (!TestUrl.StartsWith("https://"))
        {
            await JSRuntime.InvokeVoidAsync("alert", "由于浏览器安全限制，请使用https协议");
            return;
        }

        TaskText = "正在检验链接...";
        IsTaskDisabled = true;

        try
        {
            var http = new HttpClient();
            http.DefaultRequestHeaders.Referrer = null;
            var response = await http.GetAsync(TestUrl, HttpCompletionOption.ResponseHeadersRead);
            response.EnsureSuccessStatusCode();

        } catch (Exception e)
        {
            TaskText = default;
            IsTaskDisabled = false;
            await JSRuntime.InvokeVoidAsync("alert", "该链接不可用，如果你能够正常访问该链接，那么很有可能是浏览器的跨域限制");
            StateHasChanged();
            return;
        }

        // 初始化状态
        IsRunning = true;
        TaskText = "停止";
        Description = "实时速度";
        StartTime = DateTime.Now;
        AllDownSum = 0;
        ThreadDownloads = Enumerable.Repeat(0L, MaxThreads).ToList();

        // 启动线程
        for (int i = 0; i < MaxThreads; i++)
        {
            _ = DownloadThread(i);
        }

        // 启动统计
        _ = CalculateSpeed();
        _ = CalculateTotal();
    }

    // 停止测试
    private void StopTest()
    {
        IsRunning = false;
        TaskText = default;
    }

    // 下载线程
    private async Task DownloadThread(int index)
    {
        while (IsRunning)
        {
            try
            {
                var response = await Http.GetAsync(TestUrl, HttpCompletionOption.ResponseHeadersRead);
                var stream = await response.Content.ReadAsStreamAsync();

                byte[] buffer = new byte[8192];
                int bytesRead;

                while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                {
                    if (!IsRunning) break;

                    ThreadDownloads[index] += bytesRead;
                }
            }
            catch
            {
                // 重试
                if (IsRunning) await Task.Delay(1000);
            }
        }
    }

    // 计算速度
    private async Task CalculateSpeed()
    {
        while (IsRunning)
        {
            await Task.Delay(1000);

            long currentTotal = ThreadDownloads.Sum();
            RealTimeSpeed = (currentTotal - LastTotalDownload) / 1024.0; // KB/s
            RealTimeMbps = RealTimeSpeed * 8 / 1024.0; // Mbps
            LastTotalDownload = currentTotal;

            StateHasChanged();
        }

        // 平均速度
        long finalTotal = ThreadDownloads.Sum();
        RealTimeSpeed = finalTotal / (DateTime.Now - StartTime).TotalSeconds / 1024.0;
        RealTimeMbps = RealTimeSpeed * 8 / 1024.0;

        StateHasChanged();
    }

    private async Task CalculateTotal()
    {
        long currentTotal = ThreadDownloads.Sum();
        AllDownSum += currentTotal;
        if (AllDownSum >= Maximum && Maximum != 0)
        {
            IsRunning = false;
        }
        if (IsRunning)
        {
            await Task.Delay(100);
            await CalculateTotal();
        }
    }

    private string FormatSpeed(double num, string[] des, int[] flo)
    {
        double cnum = num;
        int totalIndex = 0;

        while (cnum >= 1024)
        {
            if (totalIndex == des.Length - 1) break;
            cnum /= 1024;
            totalIndex++;
        }

        return cnum.ToString($"F{flo[totalIndex]}", CultureInfo.InvariantCulture) + des[totalIndex];
    }

    // 获取 IP 信息
    protected override async Task OnInitializedAsync()
    {
        // await GetIpInfo();
        // _ = FetchLatency();
    }

    private async Task GetIpInfo()
    {
        Http.DefaultRequestHeaders.Add("referrerPolicy", "no-referrer");
        var globalInfo = await Http.GetFromJsonAsync<IpInfo>("https://api-ipv4.ip.sb/geoip");
        GlobalIpInfo = $"{globalInfo?.Ip} {globalInfo?.Country} {globalInfo?.Isp}";
    }

    private async Task FetchLatency()
    {
        while (true)
        {
            try
            {
                var start = DateTime.Now;
                await Http.GetAsync("https://connectivitycheck.platform.hicloud.com/generate_204");
                ChinaLatency = $"{(DateTime.Now - start).TotalMilliseconds}ms";
            }
            catch
            {
                ChinaLatency = "-ms";
            }

            try
            {
                var start = DateTime.Now;
                await Http.GetAsync("https://cp.cloudflare.com/");
                GlobalLatency = $"{(DateTime.Now - start).TotalMilliseconds}ms";
            }
            catch
            {
                GlobalLatency = "-ms";
            }

            await Task.Delay(5000);
        }
    }

    // IP 信息模型
    private class IpInfo
    {
        public string Ip { get; set; }
        public string Province { get; set; }
        public string City { get; set; }
        public string Isp { get; set; }
        public string Country { get; set; }
    }
}