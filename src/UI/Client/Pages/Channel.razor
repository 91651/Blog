@page "/channel/{Id}"
@page "/c/{Id}"
@rendermode InteractiveAuto

@using Blog.Model
@using Blog.Client.Data
@inject NavigationManager _navigationManager
@inject IClientApiProvider _api

<PageTitle>@CurrentChannel?.Title | 遇见时光-1023.org.cn</PageTitle>
<HeadContent>
    <meta name="description" content="@CurrentChannel?.Title">
    <link rel="canonical" href="@(new Uri(new Uri(_navigationManager.BaseUri), $"/c/{Id}"))" />
</HeadContent>

@if (Articles != null)
{
    <section class="term-bar">
        <div class="container">
            <span>当前分类</span>
            <span class="term-illustrate">@CurrentChannel.Title</span>
        </div>
    </section>
    <section class="site-content container">
        @foreach (var article in Articles)
        {
            <article class="hasThumb flex">
                <div class="article-content">
                    <h2 class="entry-title hidden">
                        <a class="hoverColor" href="/p/@article.Id" title="@article.Title" rel="bookmark">@article.Title</a>
                    </h2>
                    <div class="entry-content hidden">
                        @article.Summary
                    </div>
                    <div class="entry-info">
                        <span class="info">
                            <svg class="icon">
                                <use xlink:href="#icon-book" />
                            </svg>
                            @article.ChannelName
                        </span>
                        <span class="info">
                            <svg class="icon">
                                <use xlink:href="#icon-calendar" />
                            </svg>                        @($"{article.Created:yyyy年M月d日 HH:mm}")
                        </span>
                        <span class="info">
                            <svg class="icon">
                                <use xlink:href="#icon-user" />
                            </svg>                        @article.Author
                        </span>
                        <span class="info">
                            <svg class="icon">
                                <use xlink:href="#icon-eye" />
                            </svg>                        @article.Viewed
                        </span>
                        <span class="info">
                            <svg class="icon">
                                <use xlink:href="#icon-message" />
                            </svg>                        @article.CommentCount
                        </span>
                    </div>
                </div>
                <div class="entry-thumb">
                    <a class="focus hidden" href="/p/@article.Id" title="@article.Title">
                        @if (@article.File != null)
                        {
                            <img loading="auto" src="@Path.Combine(article.File.Path, article.File.Name)" alt="@article.Title" title="@article.Title">
                        }
                    </a>
                </div>
            </article>
        }
        <div class="pagenavi flex">
            <a class="load-more" @onclick="GetArticles">阅读更多</a>
        </div>
    </section>
}
else
{
    <section class="site-content container">
        <span class="trem-state">抱歉，这个页面不存在！</span>
        <span class="trem-info">它可能已经被删除，或者您访问的URL是不正确的。也许您可以试试搜索？</span>
        <form method="get" class="vice-search" action="/search">
            <input type="search" class="field" placeholder="输入关键词进行搜索…" name="q" required>
            <button type="submit" class="search-submit"><i class="iconfont icon-search-2-line"></i></button>
        </form>
    </section>
}


@code {
    [Parameter]
    public string? Id { get; set; }
    [PersistentState]
    public int Page { get; set; }
    [PersistentState]
    public required ChannelModel CurrentChannel { get; set; }
    [PersistentState]
    public required List<ArticleListModel> Articles { get; set; }
    private ArticleQueryModel query = new() { PageSize = 20 };

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(Id))
        {
            return;
        }
        if (CurrentChannel is null)
        {
            CurrentChannel ??= new();
            CurrentChannel = await _api.GetChannelAsync(Id);
        }
        if (Articles is null)
        {
            Articles ??= new();
            await GetArticles();
        }
    }

    private async Task GetArticles()
    {
        query.ChannelId = Id;
        query.PageIndex = ++Page;
        var data = (await _api.GetArticlesAsync(query)).Data;
        Articles.AddRange(data);
    }
}
